let AuthService,security,userValidations,response;_e1c‍.x([["AuthRoutes",()=>AuthRoutes]]);_e1c‍.w("../services",[["AuthService",["AuthService"],function(v){AuthService=v}]]);_e1c‍.w("../lib/security",[["security",["security"],function(v){security=v}]]);_e1c‍.w("../validations",[["userValidations",["userValidations"],function(v){userValidations=v}]]);_e1c‍.w("../lib/handleResponse",[["response",["response"],function(v){response=v}]]);



class AuthRoutes {
  constructor(router) {
    this.router = router;
    this.registerRoutes();
  }

  registerRoutes() {
    this.router.post(
      "/v1/auth/login",
      userValidations.loginValidate.bind(this),
      this.login.bind(this)
    );
    this.router.post("/v1/auth/register", this.register.bind(this));
  }



  async login(req, res, next) {
    try {
      const loginResponse = await AuthService.login(req.body);
      response.success(res, loginResponse);
    } catch (error) {
      response.error(res, error);
    }
  }

  async register(req, res, next) {
    try {
      const user = await AuthService.register(req.body);
      response.success(res, { user });
    } catch (error) {
      _e1c‍.g.console.log(error);
      response.error(res, error);
    }
  }
}





