let express,helmet,bodyParser,cookieParser,responseTime,winston,apiRouter,security,logger,settings;_d66‍.w("express",[["default",["express"],function(v){express=v}]]);_d66‍.w("helmet",[["default",["helmet"],function(v){helmet=v}]]);_d66‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_d66‍.w("cookie-parser",[["default",["cookieParser"],function(v){cookieParser=v}]]);_d66‍.w("response-time",[["default",["responseTime"],function(v){responseTime=v}]]);_d66‍.w("winston",[["default",["winston"],function(v){winston=v}]]);_d66‍.w("./apiRouter",[["default",["apiRouter"],function(v){apiRouter=v}]]);_d66‍.w("./src/lib",[["security",["security"],function(v){security=v}],["logger",["logger"],function(v){logger=v}]]);_d66‍.w("./config",[["default",["settings"],function(v){settings=v}]]);








const cors = require('cors');
const app = express();

const STATIC_OPTIONS = {
	maxAge: 31536000000 // One year
};
app.use(cors());
app.set('trust proxy', 1);
app.use(helmet());

app.use(bodyParser.json({ limit: '50mb' }));
app.use(bodyParser.urlencoded({ limit: '50mb', extended: true }));

app.get('/images/:entity/:id/:size/:filename', (req, res, next) => {
	// A stub of image resizing (can be done with Nginx)
	const newUrl = `/images/${req.params.entity}/${req.params.id}/${req.params.filename}`;
	req.url = newUrl;
	next();
});
app.use(express.static('public', STATIC_OPTIONS));
security.applyMiddleware(app);
app.use(responseTime());
app.use(cookieParser(settings.cookieSecretKey));
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use('/api', apiRouter);
app.use(logger.sendResponse);

const server = app.listen(settings.apiListenPort, () => {
	const serverAddress = server.address();
	winston.info(`API running at http://localhost:${serverAddress.port}`);
});

